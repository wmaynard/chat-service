# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1
strategyType:
# `serviceAccountName` is deprecated in favor of `serviceAccount.name`
serviceAccountName:
image:
  repository: gitlab.cdrentertainment.com:5050/platform-services/chat-service
  tag: stable
  pullPolicy: IfNotPresent
  # secrets:
#   - name: gitlab-registry
extraLabels: {}
lifecycle: {}
# preStop:
#   exec:
#     command: ["/bin/sh", "-c", "sleep 10"]
podAnnotations: {}
nodeSelector: {}
affinity: {}
tolerations: []
application:
  track: stable
  tier: web
  migrateCommand:
  initializeCommand:
  secretName:
  secretChecksum:
hpa:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  CPUUtilizationPercentage: 60
  MemUtilizationPercentage: 60
  keda:
    enabled: true
    requestsPerSecond: "10"
    serverAddress: http://prometheus-server.gitlab-managed-apps.svc:80
    MemUtilizationPercentage: 95
gitlab:
  app:
  env:
  envName:
  envURL:
  projectID:
service:
  enabled: true
  annotations: {}
  name: cs-prod # 15 character limit..
  type: NodePort
  url:
  additionalHosts:
  commonName:
  externalPort: 5000
  internalPort: 8080
ingress:
  className: nginx
  enabled: true
  path: "/chat"
  tls:
    enabled: false
    acme: false
    secretName: "chat-service-prod"
    useDefaultSecret: false
  annotations:
    nginx.ingress.kubernetes.io/client-body-buffer-size: 10m
    nginx.ingress.kubernetes.io/service-upstream: "true"
  modSecurity:
    enabled: false
    secRuleEngine: "DetectionOnly"
    # secRules:
  #   - variable: ""
  #     operator: ""
  #     action: ""
  canary:
    weight:
prometheus:
  metrics: false
livenessProbe:
  path: "/chat/health"
  initialDelaySeconds: 5
  timeoutSeconds: 2
  scheme: "HTTP"
  probeType: "httpGet"
readinessProbe:
  path: "/chat/health"
  initialDelaySeconds: 5
  timeoutSeconds: 2
  scheme: "HTTP"
  probeType: "httpGet"
startupProbe:
  path: "/chat/health"
  failureThreshold: 30
  timeoutSeconds: 2
  scheme: "HTTP"
  probeType: "httpGet"
postgresql:
  managed: false
  managedClassSelector:
  #   matchLabels:
  #     stack: gitlab (This is an example. The labels should match the labels on the CloudSQLInstanceClass)

resources:
  limits:
    cpu: null
    memory: 576Mi
  requests:
    cpu: 256m
    memory: 512Mi

## Configure PodDisruptionBudget
## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
#
podDisruptionBudget:
  enabled: true
  minAvailable: 1

## Configure NetworkPolicy
## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
#
networkPolicy:
  enabled: false
  spec:
    podSelector:
      matchLabels: {}
    ingress:
    - from:
      - podSelector:
          matchLabels: {}
      - namespaceSelector:
          matchLabels:
            app.gitlab.com/managed_by: gitlab

ciliumNetworkPolicy:
  enabled: false
  alerts:
    enabled: false
  spec:
    endpointSelector: {}
    ingress:
    - fromEndpoints:
      - matchLabels:
          app.gitlab.com/managed_by: gitlab

serviceAccount:
  name:
  annotations: {}
  createNew: false

persistence:
  enabled: false
  volumes:
  - name: data
    mount:
      path: "/pvc-mount"
      # subPath: "/pvc-mount/config.txt"
    claim:
      accessMode: ReadWriteOnce
      size: 8Gi
      # If you want to use a custom storage class, you can specify `storageClass`. In this case, you need to create a storage class at first.
# If `storageClass` is not specified, the behavior will vary per Kubernetes provider.
# For example, GKE automatically chooses a default storage class and allocate a physical storage.
# See https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes for more information.
# storageClass: "myStorage"

workers: {}
# worker:
#   replicaCount: 1
#   terminationGracePeriodSeconds: 60
#   command:
#   - /bin/herokuish
#   - procfile
#   - start
#   - worker
#   nodeSelector: {}
#   tolerations: []
#   livenessProbe:
#     path: "/"
#     initialDelaySeconds: 15
#     timeoutSeconds: 15
#     scheme: "HTTP"
#     probeType: "httpGet"
#   readinessProbe:
#     path: "/"
#     initialDelaySeconds: 5
#     timeoutSeconds: 3
#     scheme: "HTTP"
#     probeType: "httpGet"
#   lifecycle:
#     preStop:
#       exec:
#         command: ["/bin/sh", "-c", "sleep 10"]
#   preStopCommand:
#   - /bin/herokuish
#   - procfile
#   - start
#   - stop_worker
